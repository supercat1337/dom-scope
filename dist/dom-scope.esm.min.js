var p="scope-name",_="ref";function u(n){return Object.assign({},{scope_attr_name:p,ref_attr_name:_,document:null},n)}function d(n,t,e={}){var r={},s={},i=u(e);function a(o){var f=o.getAttribute(i.ref_attr_name);if(f&&(r[f]=o),o!=n){var l=o.getAttribute(i.scope_attr_name);l&&(s[l]=o)}t&&t(o)}return c(n,a,i),{refs:r,scope_refs:s}}function w(n,t){var e={},r=u(t);function s(i){let a=i.getAttribute(r.ref_attr_name);a&&(e[a]=i)}return c(n,s,r),e}function c(n,t,e){var r=u(e);function s(o){var f=o,l=f.parentElement;return l&&l.hasAttribute(r.scope_attr_name)&&l!=n?2:1}let i=(r.document||n.ownerDocument).createTreeWalker(n,1,s);for(var a;a=i.nextNode();)t(a)}var h=class n{#t;#e=!0;#r;#s;options={};constructor(t){this.#t=t}get root(){return this.#t}get refs(){return this.#e&&this.update(),this.#r}get scopes(){return this.#e&&this.update(),this.#s}update(t){if(this.#t===null)throw new Error("Object is already destroyed");let{refs:e,scope_refs:r}=d(this.#t,t,this.options);this.#r=e;let s={};for(let i in r)s[i]=new n(r[i]),s[i].options=this.options;this.#s=s,this.#e=!1}querySelector(t){if(this.#t===null)throw new Error("Object is already destroyed");let e=this.#t.querySelector(t);return!e||!this.contains(e,!0)?null:e}querySelectorAll(t){if(this.#t===null)throw new Error("Object is already destroyed");var e=this.#t.querySelectorAll(t);if(e.length==0)return[];var r=[];for(let s=0;s<e.length;s++)this.contains(e[s],!0)&&r.push(e[s]);return r}contains(t,e=!1){if(this.#t===null)throw new Error("Object is already destroyed");if(e===!1&&!this.#t.contains(t))return!1;var r=this.scopes;for(let s in r){let i=r[s];if(i.#t==t)return!0;if(i.#t.contains(t))return!1}return!0}walk(t){if(this.#t===null)throw new Error("Object is already destroyed");c(this.#t,t,this.options)}destroy(){this.#t=null,this.#e=!1,this.#r={},this.#s={},this.options={}}};export{h as DomScope,w as selectRefs,d as selectRefsExtended,c as walkDomScope};
